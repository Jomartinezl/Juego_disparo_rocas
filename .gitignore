import pygame
import random

# Inicialización de PyGame
pygame.init()

# Configuración de la pantalla
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Defensa de rocas")

# Colores personalizados
GREEN = (0, 255, 0)    # Color verde para el jugador
GRAY = (169, 169, 169)  # Color gris para las rocas
YELLOW = (255, 255, 0)  # Color amarillo para los disparos
WHITE = (255, 255, 255)

# Variables del juego
player_x = SCREEN_WIDTH // 2
player_y = SCREEN_HEIGHT - 50
player_speed = 5

stone_x = random.randint(0, SCREEN_WIDTH)
stone_y = 0
stone_speed = 2

# Variables para los disparos
bullets = []

# Función para dibujar al jugador
def draw_player(x, y):
    pygame.draw.rect(screen, GREEN, (x, y, 50, 50))

# Función para dibujar las rocas
def draw_stone(x, y):
    pygame.draw.rect(screen, GRAY, (x, y, 50, 50))

# Función para disparar
def fire_bullet(x, y):
    bullet = pygame.draw.rect(screen, YELLOW, (x + 20, y - 10, 10, 30))
    bullets.append(bullet)

def main():
    global player_x, player_y, stone_x, stone_y
    
    running = True
    clock = pygame.time.Clock()
    
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

        keys = pygame.key.get_pressed()
        
        if keys[pygame.K_LEFT]:
            player_x -= player_speed
        if keys[pygame.K_RIGHT]:
            player_x += player_speed

        # Lógica de disparo
        if keys[pygame.K_SPACE]:
            fire_bullet(player_x, player_y)

        # Lógica de movimiento de las rocas
        stone_y += stone_speed

        # Lógica de movimiento de los disparos hacia arriba
        for bullet in bullets:
            bullet.y -= 5  # Mover los disparos hacia arriba

        # Lógica de colisión entre disparos y "piedras"
        for bullet in bullets:
            if bullet.colliderect(stone_x, stone_y, 50, 50):
                bullets.remove(bullet)
                stone_x = random.randint(0, SCREEN_WIDTH)
                stone_y = 0

        # Lógica de colisión con el límite de la pantalla
        if stone_y > SCREEN_HEIGHT:
            stone_x = random.randint(0, SCREEN_WIDTH)
            stone_y = 0

        if player_x < 0:
            player_x = 0
        elif player_x > SCREEN_WIDTH - 50:
            player_x = SCREEN_WIDTH - 50

        screen.fill(WHITE)
        draw_player(player_x, player_y)
        draw_stone(stone_x, stone_y)

        # Dibujar los disparos
        for bullet in bullets:
            pygame.draw.rect(screen, YELLOW, bullet)

        pygame.display.flip()
        
        clock.tick(60)

    pygame.quit()

if __name__ == "__main__":
    main()
